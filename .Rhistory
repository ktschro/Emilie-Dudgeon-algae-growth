size = 1,se=FALSE, color="grey") +
labs("x=Temperature (deg C)",y="Intrinsic growth rate, r") +
facet_wrap(~method) +
theme_classic()
# for K
merged_results_all %>%
filter(temp_desc == "mean_temp" &
temp_type == "constant") %>%
ggplot(aes(x=temp_rounded,y=K)) +
geom_point() +
stat_smooth(data = filter(merged_results_all,
temp_type=="constant" &
temp_desc=="mean_temp"),
method = "lm", formula = y ~ x + I(x^2),
size = 1,se=FALSE, color="grey") +
labs("x=Temperature (deg C)",y="Carrying capacity, K") +
facet_wrap(~method) +
theme_classic()
# for K
merged_results_all %>%
filter(temp_desc == "mean_temp" &
temp_type == "constant") %>%
filter(treatment_name != "34") %>%
ggplot(aes(x=temp_rounded,y=K)) +
geom_point() +
stat_smooth(data = filter(merged_results_all,
temp_type=="constant" &
temp_desc=="mean_temp"),
method = "lm", formula = y ~ x + I(x^2),
size = 1,se=FALSE, color="grey") +
labs("x=Temperature (deg C)",y="Carrying capacity, K") +
facet_wrap(~method) +
theme_classic()
# for K
merged_results_all %>%
filter(temp_desc == "mean_temp" &
temp_type == "constant") %>%
filter(treatment_name != "34") %>%
ggplot(aes(x=temp_rounded,y=K)) +
geom_point() +
stat_smooth(data = filter(merged_results_all,
temp_type=="constant" &
temp_desc=="mean_temp" &
treatment_name != "34"),
method = "lm", formula = y ~ x + I(x^2),
size = 1,se=FALSE, color="grey") +
labs("x=Temperature (deg C)",y="Carrying capacity, K") +
facet_wrap(~method) +
theme_classic()
merged_results_all %>%
filter(temp_desc == "mean_temp") %>%
ggplot(aes(x=temp,y=r,
color=fluct_size)) +
scale_color_manual(values = c("gray40","black","grey60","grey80"))+
stat_smooth(data = filter(merged_results_all,
temp_type=="constant" &
temp_desc=="mean_temp"),
method = "lm", formula = y ~ x + I(x^2), size = 1,se=FALSE) +
labs("x=Temperature (deg C)",y="Intrinsic growth rate, r") +
geom_point() +
facet_wrap(~method) +
theme_classic()
merged_results_all %>%
filter(temp_desc == "mean_temp" &
temp_type == "constant") %>%
ggplot(aes(x=temp_rounded,y=r)) +
geom_point() +
stat_smooth(data = filter(merged_results_all,
temp_type=="constant" &
temp_desc=="mean_temp"),
method = "lm", formula = y ~ x + I(x^2),
size = 1,se=FALSE, color="grey") +
labs("x=Temperature (deg C)",y="Intrinsic growth rate, r") +
facet_wrap(~method) +
theme_classic()
# for K
merged_results_all %>%
filter(temp_desc == "mean_temp" &
temp_type == "constant") %>%
filter(treatment_name != "34") %>%
ggplot(aes(x=temp_rounded,y=K)) +
geom_point() +
stat_smooth(data = filter(merged_results_all,
temp_type=="constant" &
temp_desc=="mean_temp" &
treatment_name != "34"),
method = "lm", formula = y ~ x + I(x^2),
size = 1,se=FALSE, color="grey") +
labs("x=Temperature (deg C)",y="Carrying capacity, K") +
facet_wrap(~method) +
theme_classic()
merged_results_all %>%
filter(temp_desc == "mean_temp") %>%
ggplot(aes(x=temp,y=mean_r,
color=fluct_size)) +
scale_color_manual(values = c("gray40","black","grey60","grey80"))+
stat_smooth(data = filter(merged_results_all,
temp_type=="constant" &
temp_desc=="mean_temp"),
method = "lm", formula = y ~ x + I(x^2), size = 1,se=FALSE) +
labs("x=Temperature (deg C)",y="Intrinsic growth rate, r") +
geom_point() +
theme_classic()
fluct <- merged_results_all %>% filter(temp_desc == "temp_range")
View(fluct)
hist(fluct$temp)
#graph slope (r) by mean temperature from HOBO data with temp range (daily) as the color
merged_results_all %<>% mutate(fluct_size = case_when(
str_detect(treatment_name,"S")~"small",
str_detect(treatment_name,"M")~"medium",
str_detect(treatment_name,"B")~"big",
temp_type=="constant" ~ "constant"
),
fluct_size_num = case_when(
temp_desc == "temp_range" & temp <= 5 ~ 0,
temp_desc == "temp_range" & temp <= 5 ~ 7.5,
temp_desc == "temp_range" & temp <= 5 ~ 15,
temp_desc == "temp_range" & temp >= 20 ~ 22,
TRUE ~ NA))
fluct <- merged_results_all %>% filter(temp_desc == "temp_range")
#graph slope (r) by mean temperature from HOBO data with temp range (daily) as the color
merged_results_all %<>% mutate(fluct_size = case_when(
str_detect(treatment_name,"S")~"small",
str_detect(treatment_name,"M")~"medium",
str_detect(treatment_name,"B")~"big",
temp_type=="constant" ~ "constant"
),
fluct_size_num = case_when(
temp_desc == "temp_range" & temp_rounded <= 5 ~ 0,
temp_desc == "temp_range" & temp_rounded == 7 ~ 7.5,
temp_desc == "temp_range" & temp_rounded == 8 ~ 7.5
temp_desc == "temp_range" & temp_rounded == 15 ~ 15,
#graph slope (r) by mean temperature from HOBO data with temp range (daily) as the color
merged_results_all %<>% mutate(fluct_size = case_when(
str_detect(treatment_name,"S")~"small",
str_detect(treatment_name,"M")~"medium",
str_detect(treatment_name,"B")~"big",
temp_type=="constant" ~ "constant"
),
fluct_size_num = case_when(
temp_desc == "temp_range" & temp_rounded <= 5 ~ 0,
temp_desc == "temp_range" & temp_rounded == 7 ~ 7.5,
temp_desc == "temp_range" & temp_rounded == 8 ~ 7.5,
temp_desc == "temp_range" & temp_rounded == 15 ~ 15,
temp_desc == "temp_range" & temp >= 20 ~ 22,
TRUE ~ NA))
fluct <- merged_results_all %>% filter(temp_desc == "temp_range")
View(fluct)
mean_temp <- merged_results_all %>% filter(temp_desc == "mean_temp")
View(mean_temp)
hist(mean_temp$temp_rounded)
table(mean_temp$temp_rounded)
# data cleaning ----
# Convert raw counts to actual counts
colnames(algae)[5] <- "raw_count"
algae$count <- ifelse(algae$dilution=="none",algae$raw_count,algae$raw_count*10)
algae_all <- algae %>% filter(!is.na(count))
# logistic model 1: each replicate individually ----
fit_logistic_model_all <- function(algae_all) {
time <- algae_all$exp_day
population <- algae_all$count
logistic_growth <- function(time, r, K) {
N0 <- population[1]
N <- N0 * K / (N0 + (K - N0) * exp(-r * time))
return(N)
}
model <- optim(par = c(r = 1.5, K = 120),
fn = function(par) sum((population - logistic_growth(time, par[1], par[2]))^2),
method = "BFGS",
control = list(maxit = 200))
r_hat <- model$par[1]
K_hat <- model$par[2]
# Predict population size for each day using the fitted model
predicted_population <- logistic_growth(time, r_hat, K_hat)
return(data.frame(temp = unique(algae_all$temp),
exp_day = time,
observed_population = population,
predicted_population = predicted_population,
r = r_hat,
K = K_hat,
N0 = population[1]))
}
# logistic model 1: each replicate individually ----
fit_logistic_model_all <- function(algae_all) {
time <- algae_all$exp_day
population <- algae_all$count
logistic_growth <- function(time, r, K) {
N0 <- population[1]
N <- N0 * K / (N0 + (K - N0) * exp(-r * time))
return(N)
}
model <- optim(par = c(r = 1.5, K = 120),
fn = function(par) sum((population - logistic_growth(time, par[1], par[2]))^2),
method = "BFGS",
control = list(maxit = 200))
r_hat <- model$par[1]
K_hat <- model$par[2]
# Predict population size for each day using the fitted model
predicted_population <- logistic_growth(time, r_hat, K_hat)
return(data.frame(temp = unique(algae_all$temp),
exp_day = time,
observed_population = population,
predicted_population = predicted_population,
r = r_hat,
K = K_hat,
N0 = population[1]))
}
results_all <- algae_all %>%
group_by(temp,rep) %>%
do(fit_logistic_model_all(.))
# get predictions and plot each replicaate
temps <- unique(algae$temp)
sequence_values <- seq(1,50,by=0.25)
results_all_pred <- data.frame(
exp_day = rep(sequence_values,length(temps)),
temp = rep(temps,each=length(sequence_values)))
randK_all <- results_all %>%
select(r,K,N0,temp,rep) %>%
unique()
results_all_pred <- merge(results_all_pred,randK_all,by="temp")
# use r, K, and N0 to get model values
results_all_pred$N <- results_all_pred$N0 * results_all_pred$K /
(results_all_pred$N0 +
(results_all_pred$K - results_all_pred$N0) *
exp(-results_all_pred$r * results_all_pred$exp_day))
#plot individual replicates and model fit
#constant temps
results_all_pred %>% filter(!str_detect(temp,"V")) %>%
ggplot(aes(x=exp_day,y=N)) +
geom_line() +
facet_grid(rows=vars(temp),cols=vars(rep),scales = "free") +
geom_hline(aes(yintercept=K),color="darksalmon",
linetype="dashed")+
geom_point(data = filter(algae_all,!str_detect(temp,"V")),
mapping = aes(x=exp_day,y=count),
size=2,alpha=0.2)+
labs(y="Population size",x="Time (days)") +
theme_bw()
#variable temps
results_all_pred %>% filter(str_detect(temp,"V")) %>%
ggplot(aes(x=exp_day,y=N)) +
geom_line() +
facet_grid(rows=vars(temp),cols=vars(rep),scales = "free") +
geom_hline(aes(yintercept=K),color="darksalmon",
linetype="dashed")+
geom_point(data = filter(algae_all,str_detect(temp,"V")),
mapping = aes(x=exp_day,y=count),
size=2,alpha=0.2)+
labs(y="Population size",x="Time (days)") +
theme_bw()
# logistic model 1: summarized results ----
results_all %>%
filter(r <= 5) %>%
ggplot(aes(x=temp,y=r)) +
geom_boxplot() +
theme_classic()
results_all %>%
filter(K <= 7500) %>%
ggplot(aes(x=temp,y=K)) +
geom_boxplot() +
theme_classic()
results_all_sum <- results_all %>%
select(temp,rep,r,K) %>%
unique() %>%
group_by(temp) %>%
summarize(mean_r = mean(r),
mean_K = mean(K),
se_r = sd(r)/sqrt(n()),
se_K = sd(K)/sqrt(n()))
ggplot(results_all_sum,aes(x=temp,y=mean_r)) +
geom_point() +
geom_errorbar(aes(ymin=mean_r-se_r,ymax=mean_r+se_r), width = 0.2) +
theme_classic()
# logistic model 2: summarized replicates ----
algae_sum <- algae %>% group_by(temp,exp_day) %>%
summarize(count = mean(count,na.rm=T))
fit_logistic_model_sum <- function(algae_sum) {
time <- algae_sum$exp_day
population <- algae_sum$count
logistic_growth <- function(time, r, K) {
N0 <- population[1]
N <- N0 * K / (N0 + (K - N0) * exp(-r * time))
return(N)
}
model <- optim(par = c(r = 1.5, K = 120),
fn = function(par) sum((population - logistic_growth(time, par[1], par[2]))^2),
method = "BFGS",
control = list(maxit = 200))
r_hat <- model$par[1]
K_hat <- model$par[2]
return(data.frame(temp = unique(algae_sum$temp),
exp_day = time,
observed_population = population,
r = r_hat,
K = K_hat,
N0 = population[1]))
}
results_sum <- algae_sum %>%
group_by(temp) %>%
do(fit_logistic_model_sum(.))
population <- algae_all$count
fit_logistic_model_sum <- function(algae_all) {
time <- algae_all$exp_day
population <- algae_all$count
logistic_growth <- function(time, r, K) {
N0 <- population[1]
N <- N0 * K / (N0 + (K - N0) * exp(-r * time))
return(N)
}
model <- optim(par = c(r = 1.5, K = 120),
fn = function(par) sum((population - logistic_growth(time, par[1], par[2]))^2),
method = "BFGS",
control = list(maxit = 200))
r_hat <- model$par[1]
K_hat <- model$par[2]
return(data.frame(temp = unique(algae_sum$temp),
exp_day = time,
observed_population = population,
r = r_hat,
K = K_hat,
N0 = population[1]))
}
results_sum <- algae_sum %>%
group_by(temp) %>%
do(fit_logistic_model_sum(.))
return(data.frame(temp = unique(algae_all$temp),
exp_day = time,
observed_population = population,
r = r_hat,
K = K_hat,
N0 = population[1]))
fit_logistic_model_sum <- function(algae_all) {
time <- algae_all$exp_day
population <- algae_all$count
logistic_growth <- function(time, r, K) {
N0 <- population[1]
N <- N0 * K / (N0 + (K - N0) * exp(-r * time))
return(N)
}
model <- optim(par = c(r = 1.5, K = 120),
fn = function(par) sum((population - logistic_growth(time, par[1], par[2]))^2),
method = "BFGS",
control = list(maxit = 200))
r_hat <- model$par[1]
K_hat <- model$par[2]
return(data.frame(temp = unique(algae_all$temp),
exp_day = time,
observed_population = population,
r = r_hat,
K = K_hat,
N0 = population[1]))
}
results_sum <- algae_sum %>%
group_by(temp) %>%
do(fit_logistic_model_sum(.))
results_sum_pred <- data.frame(
exp_day = rep(sequence_values,length(temps)),
temp = rep(temps,each=length(sequence_values)))
# get r and K for each temperature
randK_sum <- results_sum %>%
select(r,K,N0,temp) %>%
unique()
warnings()
# get r and K for each temperature
randK_sum <- results_sum %>%
select(r,K,N0,temp) %>%
unique()
results_sum_pred <- merge(results_sum_pred,randK_sum,by="temp")
# use r, K, and N0 to get model values
results_sum_pred$N <- results_sum_pred$N0 * results_sum_pred$K /
(results_sum_pred$N0 +
(results_sum_pred$K - results_sum_pred$N0) *
exp(-results_sum_pred$r * results_sum_pred$exp_day))
# plot fitted model ----
ggplot(results_sum_pred,aes(x=exp_day,y=N)) +
geom_line() +
facet_wrap(~temp) +
geom_hline(aes(yintercept=K),color="darksalmon",
linetype="dashed")+
geom_point(data = algae_all,
mapping = aes(x=exp_day,y=count),
size=2,alpha=0.2)+
labs(y="Population size",x="Time (days)") +
theme_classic()
# now compare r and K for each temperature treatment ----
# first look
ggplot(results_sum,aes(x=temp,y=r)) +
geom_point() +
theme_classic()
ggplot(results_sum,aes(x=temp,y=K)) +
geom_point() +
theme_classic()
# compare r's and K's for each method ----
randK_sum$rep <- NA
randK_sum$method <- "summarized"
randK_all$method <- "by replicate"
compare <- rbind(randK_all,randK_sum)
# plot
compare %>%
filter(r <=5) %>%
ggplot(aes(x=temp,y=r,color=method)) +
geom_boxplot() +
theme_classic()
compare %>%
filter(K <= 7500) %>%
ggplot(aes(x=temp,y=K,color=method)) +
geom_boxplot() +
theme_classic()
setwd("/Users/katieschroeder/Documents/GitHub/Emilie-Dudgeon-algae-growth")
algae <- read.csv("raw-data/algae_counts.csv")
library(tidyverse)
library(magrittr)
#raw data ----
#convert diluted counts to real count
colnames(algae)[5] <- "raw_count"
algae$count <- ifelse(algae$dilution=="none",algae$raw_count,algae$raw_count*10)
#first look: algal growth over time in each treatment:
ggplot(algae,aes(x=exp_day,y=count,group=rep)) +
geom_point() +
geom_line() +
facet_wrap(~temp) +
theme_classic() +
labs(y="Count of algal cells on haemocytometer",x="Day of experiment")
#look at just the maximum count (the last day)
#first, add some temp treatment information
algae %<>%
mutate(mean_temp = ifelse(str_detect(temp,"V"),
as.numeric(gsub("\\D", "",temp)),
as.numeric(temp)),
temp_var = case_when(
str_detect(temp,"VM") ~ "medium",
str_detect(temp,"VS") ~ "small",
str_detect(temp,"VB") ~ "big",
TRUE ~ "none"
))
algae$mean_temp <- ifelse(algae$mean_temp == 23.0, 23.5, algae$mean_temp)
#now plot max at last experiment day (19) as a boxplot for each with mean temp as the x-axis
algae %>% filter(exp_day == 19) %>%
ggplot(aes(x=factor(mean_temp),y=count,fill=as.factor(temp_var))) +
geom_boxplot() +
#facet_wrap(~temp_var,nrow=1) +
theme_classic()
ggsave("plots/exploratory/algae_last_day_count_boxplot.png",width=12,height=5,units="in",dpi=600)
#daily summary for each treatment
#summarize within each treatment and day
algae_sum <- algae %>% group_by(temp,exp_day) %>%
dplyr::summarize(mean_count = mean(count,na.rm=T),
sd_count = sd(count,na.rm=T),
se_count = sd(count,na.rm=T)/sqrt(n()),
mean_temp = unique(mean_temp),
temp_var = unique(temp_var))
#calculate log N
algae_sum$log_mean_count <- log(algae_sum$mean_count)
#graph log N vs t for each treatment and add rough trendlines
algae_sum %>%
ggplot(aes(x=exp_day,y=log_mean_count)) +
geom_point() +
facet_wrap(~temp) +
geom_smooth(method='lm',se=FALSE)+
theme_classic()
ggsave("plots/exploratory/all_trt_log_mean_count_time_lms.png",width=10,height=8,units="in",dpi=600)
#specific growth rate should be slope of the line of ln(density) vs time
#do a bunch of linear models ----
list_of_algae_dfs = split(algae_sum, algae_sum$temp)
results = lapply(list_of_algae_dfs, function(dat) lm(log_mean_count ~ exp_day, data = dat))
lapply(results, summary)
algae_pval <- sapply(results, function(x) summary(x)$coefficients)
algae_pval
algae_pval <- as.data.frame(t(algae_pval))
algae_pval$treatment_name <- rownames(algae_pval)
colnames(algae_pval)[1:8] <- c("intercept","slope","intercept_se","slope_se",
"intercept_t_val","slope_t_val","intercept_p_value",
"slope_p_value")
algae_pval_ordered <- algae_pval[, c(9,1,2,3,4,5,6,7,8)]
write.csv(algae_pval_ordered,"processed-data/algae_growth_rates.csv")
#graph slopes (r) for each treatment ----
ggplot(algae_pval_ordered,aes(x=treatment_name,y=slope)) +
geom_point() +
theme_classic()
#merge with HOBO data to get actual temp response
hobo<-read.csv("processed-data/hobo_summary_daily.csv")
hobo<-hobo[,2:8]
merged <- merge(algae_pval_ordered,hobo,by="treatment_name")
#graph slope (r) by mean temperature from HOBO data with temp range (daily) as the color
merged %<>% mutate(fluct_size = case_when(
str_detect(treatment_name,"S")~"small",
str_detect(treatment_name,"M")~"medium",
str_detect(treatment_name,"B")~"big",
temp_type=="constant" ~ "constant"
))
merged$temp_rounded <- round(merged$temp,digits=0)
merged %>% filter(temp_var=="temp_range"|temp_var=="mean_temp") %>%
pivot_wider(names_from= "temp_var" ,values_from = "temp_rounded") %>%
mutate(temp_range2 = lead(temp_range)) %>%
filter(!is.na(mean_temp)) %>%
ggplot(aes(x=mean_temp,y=slope,color=fluct_size)) +
geom_point() +
#geom_errorbar(aes(ymin=slope-slope_se,ymax=slope+slope_se,alpha=0.3,width=0.1))+
theme_classic() +
geom_line(aes(group=fluct_size))
ggsave("plots/exploratory/all_trt_algal_growth_temp_corrected.png",width=10,height=8,units="in",dpi=600)
#just constant
merged %>% filter(temp_var=="temp_range"|temp_var=="mean_temp") %>%
pivot_wider(names_from= "temp_var" ,values_from = "temp_rounded") %>%
filter(temp_type=="constant") %>%
mutate(temp_range2 = lead(temp_range)) %>%
filter(!is.na(mean_temp)) %>%
ggplot(aes(x=mean_temp,y=slope,color=fluct_size)) +
geom_point() +
#geom_errorbar(aes(ymin=slope-slope_se,ymax=slope+slope_se,alpha=0.3,width=0.1))+
theme_classic() +
geom_line(aes(group=fluct_size))
